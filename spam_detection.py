# -*- coding: utf-8 -*-
"""Spam Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uc16uAlzlfN6F-e9ptRtCRm__JHfgkVl
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn import svm

spam = pd.read_csv('spam.csv')
spam

z = spam['v2']
y = spam['v1']
z_train, z_test,y_train, y_test = train_test_split(z,y,test_size = 0.2)

print(set(y_train))

cv = CountVectorizer()
features = cv.fit_transform(z_train)

model = svm.SVC()
model.fit(features,y_train)

features_test = cv.transform(z_test)
print("Accuracy: {}".format(model.score(features_test,y_test)))

from sklearn.metrics import confusion_matrix
import seaborn as sns

predictions = model.predict(features_test)
cm = confusion_matrix(y_test, predictions)
sns.heatmap(cm, annot=True, fmt="d")

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
y_test_numeric = le.fit_transform(y_test)

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt

probas = model.decision_function(features_test)
fpr, tpr, thresholds = roc_curve(y_test_numeric, probas)
roc_auc = auc(fpr, tpr)
plt.plot(fpr, tpr, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn import svm
import joblib

# Load the data
spam = pd.read_csv('spam.csv')
z = spam['v2']
y = spam['v1']

# Train the model
cv = CountVectorizer()
features = cv.fit_transform(z)
model = svm.SVC()
model.fit(features, y)

# Save the model
joblib.dump(model, 'model.pkl')

# Load the model
model = joblib.load('model.pkl')

# Get user input
input_mail = input("Enter your email text: ")

# Preprocess the input
input_features = cv.transform([input_mail])

# Predict the class
prediction = model.predict(input_features)

if prediction[0] == 'ham':
    print("This mail is not spam.")
else:
    print("This mail is spam.")